package com.abc.rule.people.preipm

import com.abc.fuse.improve.attribute.FuseAttribute;
import com.abc.fuse.improve.attribute.OpsAttribute;
import com.abc.fuse.improve.attribute.OpsRecordRelation;
import com.abc.fuse.improve.attribute.leaf.OpsLeafAttribute;
import com.abc.relation.RecordRelation;
import com.abc.fuse.improve.attribute.AddedRecordRelation;
import  com.zhsq.biz.constant.people.PeopleItem;
import  com.zhsq.biz.constant.family.FamilyItem;
import com.abc.rrc.record.Attribute;
import com.abc.rrc.factory.AttributeFactory;
import com.zhsq.biz.family.algorithm.DataIntrospection;
import com.zhsq.biz.constant.EnumKeyValue;
import com.zhsq.biz.constant.RelationType;
import com.abc.fuse.improve.attribute.leaf.FuseLeafAttribute;
import com.zhsq.biz.common.CommonCalculation;
import com.zhsq.biz.people.algorithm.IDIntrospection;
import com.zhsq.biz.constant.DateUtils;
import com.zhsq.biz.constant.BaseConstant;
import com.abc.relation.RelationCorrelation;
import com.abc.fuse.improve.attribute.FuseLeafAttrFactory;
import com.zhsq.biz.people.algorithm.IDIntrospection;
import com.zhsq.biz.constant.peoplestat.FourTypePeopleItem;
import com.abc.rrc.record.RootRecord;
import com.abc.sysdate.SystemDateTimeManager;
import com.zhsq.biz.common.AuthAlgorithm;
import com.abc.transfer.builder.IRootRecordBuilder;
import com.abc.transfer.builder.RootRecordBuilderFactory;
import com.zhsq.biz.people.algorithm.CommIntrospection;

global java.lang.String hostCode; 
global java.lang.String hostType;

global java.lang.String userCode;
global java.lang.String recordCode;
global java.lang.String recordName;



global java.util.List recordRelationList;
global java.util.List rootRecordList;
global java.util.List attributeList;
global java.util.List addedLabelList;
global java.util.List removedLabelList;
global java.util.List addedLabelList;
global java.util.List putFuseLeafAttributeList;
global java.util.List addedLeafAttrList;
global java.util.Map removedLeafAttrMap;
global com.abc.rrc.record.RootRecord rootRecord;
global  com.abc.fuse.improve.ops.builder.RecordRelationOpsBuilder recordRelationOpsBuilder;
global com.abc.complexus.RecordComplexus recordComplexus;

rule "记录之前就业形式"
	when
		OpsAttribute( name==PeopleItem.就业形式,$opsValue:sqlValue)
		$fuseJOB: FuseAttribute( name== PeopleItem.就业形式,$fuseValue:sqlValue)
		eval(!$opsValue.equals($fuseValue))
	then
	
		Attribute jobType = AttributeFactory.newInstance(PeopleItem.之前就业形式, $fuseJOB.getValueForShow());
		attributeList.add(jobType);
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "人员分类" ).setFocus();
end

rule "记录之前就业形式2"
	when
		not FuseAttribute( name== PeopleItem.就业形式)
	then
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "新增人员分类" ).setFocus();
end

rule "就业创业证有效期改变"
	when
		$FAa:FuseLeafAttribute(name==PeopleItem.证件信息_证件类型,value==EnumKeyValue.ENUM_证件类型_就业创业证, $leafCode:leafCode);
   		FuseLeafAttribute(name==PeopleItem.证件信息_有效期结束,$fuseTimeValue:value, $leafCode==leafCode);
   		OpsLeafAttribute(name==PeopleItem.证件信息_有效期结束,$opsTimeValue:value, $leafCode==leafCode);
   		eval($fuseTimeValue != $opsTimeValue)
	then 
		kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "人员分类" ).setFocus();
end

/*
A类=1单位招用人数							
B类=2自谋职业+4公益性岗位人数							
C类=3灵活就业+5其他形式就业人数							
D类=6实际失业人数
退休=退休	
*/

rule "根据就业形式给人员分类"
	agenda-group "人员分类"
	salience 10 
when
	OpsAttribute(name==PeopleItem.姓名, $nameValue:value);
	OpsAttribute(name==PeopleItem.身份证号码, $IDValue:value);
	OpsAttribute(name==PeopleItem.所属社区,$areaValue:sqlValue);
	OpsAttribute( name==PeopleItem.就业形式, $jobType:sqlValue)
	FuseAttribute( name== PeopleItem.就业形式,$fuseValue:sqlValue)
	eval(EnumKeyValue.ENUM_就业形式_单位招用.equals($jobType) || EnumKeyValue.ENUM_就业形式_自谋职业.equals($jobType) ||	EnumKeyValue.ENUM_就业形式_公益性岗位.equals($jobType) ||	EnumKeyValue.ENUM_就业形式_灵活就业.equals($jobType) ||	 EnumKeyValue.ENUM_就业形式_其他形式就业.equals($jobType) ||	 EnumKeyValue.ENUM_就业形式_失业.equals($jobType))
then 

		
	Integer oldfouTypePeo = CommIntrospection.get4TypePeople(new Integer($fuseValue.toString()));
	Integer fouTypePeo = CommIntrospection.get4TypePeople(new Integer($jobType.toString()));
	
	//四类人员枚举对应的Str
	String oldfouTypePeoStr= CommIntrospection.get4TypePeopleStr(oldfouTypePeo);
	String fouTypePeoStr= CommIntrospection.get4TypePeopleStr(fouTypePeo);
	
	Attribute peopleType = AttributeFactory.newInstance(PeopleItem.四类人员, fouTypePeo);
	attributeList.add(peopleType);
	
	//生产统计
	IRootRecordBuilder iRootRecordBuilder = RootRecordBuilderFactory.getPersistRootRecordBuilder(BaseConstant.TYPE_四类人员);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.姓名, $nameValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.身份证号, $IDValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.所属社区, $areaValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.四类人员, fouTypePeo);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.四类人员转变状态, oldfouTypePeoStr + "->" + fouTypePeoStr);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.更新时间, SystemDateTimeManager.getCunrrentTime());
	
	RootRecord record = iRootRecordBuilder.getRootRecord();
	rootRecordList.add(record);
	//添加关系
	recordRelationOpsBuilder.putRelation(RelationType.RR_人口信息_关联四类人员_四类人员,record.getCode()); 
	//所属社区的权限code： AuthAlgorithm.getAreaAuthCode((Integer)$areaValue)
	//添加权限
	RecordRelation recordRelation = new RecordRelation(record.getCode(), RelationType.RR_四类人员_可被访问_权限, AuthAlgorithm.getAreaAuthCode((Integer)$areaValue));
	recordRelationList.add(recordRelation);
end 

rule "新增就业形式给人员分类"
	agenda-group "新增人员分类"
	salience 10 
when
	OpsAttribute(name==PeopleItem.姓名, $nameValue:value);
	OpsAttribute(name==PeopleItem.身份证号码, $IDValue:value);
	OpsAttribute(name==PeopleItem.所属社区,$areaValue:sqlValue);
	OpsAttribute( name==PeopleItem.就业形式, $jobType:sqlValue)
	eval(EnumKeyValue.ENUM_就业形式_单位招用.equals($jobType) || EnumKeyValue.ENUM_就业形式_自谋职业.equals($jobType) ||	EnumKeyValue.ENUM_就业形式_公益性岗位.equals($jobType) ||	EnumKeyValue.ENUM_就业形式_灵活就业.equals($jobType) ||	 EnumKeyValue.ENUM_就业形式_其他形式就业.equals($jobType) ||	 EnumKeyValue.ENUM_就业形式_失业.equals($jobType))
then 
		
	Integer fouTypePeo = CommIntrospection.get4TypePeople(new Integer($jobType.toString()));
	
	//四类人员枚举对应的Str
	String fouTypePeoStr= CommIntrospection.get4TypePeopleStr(fouTypePeo);
	
	Attribute peopleType = AttributeFactory.newInstance(PeopleItem.四类人员, fouTypePeo);
	attributeList.add(peopleType);
	
	//生产统计
	IRootRecordBuilder iRootRecordBuilder = RootRecordBuilderFactory.getPersistRootRecordBuilder(BaseConstant.TYPE_四类人员);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.姓名, $nameValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.身份证号, $IDValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.所属社区, $areaValue);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.四类人员, fouTypePeo);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.四类人员转变状态, "新增->" + fouTypePeoStr);
	iRootRecordBuilder.putAttribute(FourTypePeopleItem.更新时间, SystemDateTimeManager.getCunrrentTime());
	
	RootRecord record = iRootRecordBuilder.getRootRecord();
	rootRecordList.add(record);
	//添加关系
	recordRelationOpsBuilder.putRelation(RelationType.RR_人口信息_关联四类人员_四类人员,record.getCode()); 
	//所属社区的权限code： AuthAlgorithm.getAreaAuthCode((Integer)$areaValue)
	//添加权限
	RecordRelation recordRelation = new RecordRelation(record.getCode(), RelationType.RR_四类人员_可被访问_权限, AuthAlgorithm.getAreaAuthCode((Integer)$areaValue));
	recordRelationList.add(recordRelation);
end 