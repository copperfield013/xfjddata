package com.abc.rule.people.tipm

import com.abc.fuse.improve.attribute.FuseAttribute;
import com.abc.fuse.improve.attribute.OpsAttribute;
import com.abc.fuse.improve.attribute.OpsRecordRelation;
import com.abc.fuse.improve.attribute.leaf.OpsLeafAttribute;
import com.abc.relation.RecordRelation;
import com.abc.fuse.improve.attribute.AddedRecordRelation;
import  com.zhsq.biz.constant.people.PeopleItem;
import  com.zhsq.biz.constant.family.FamilyItem;
import com.abc.rrc.record.Attribute;
import com.abc.rrc.factory.AttributeFactory;
import com.zhsq.biz.family.algorithm.DataIntrospection;
import com.zhsq.biz.constant.EnumKeyValue;
import com.zhsq.biz.constant.RelationType;
import com.abc.fuse.improve.attribute.leaf.FuseLeafAttribute;
import com.zhsq.biz.common.CommonCalculation;
import com.zhsq.biz.people.algorithm.IDIntrospection;
import com.zhsq.biz.constant.DateUtils;
import com.zhsq.biz.constant.BaseConstant;
import com.abc.relation.RelationCorrelation;
import com.abc.fuse.improve.attribute.FuseLeafAttrFactory;
import com.zhsq.biz.people.algorithm.IDIntrospection;


global java.lang.String hostCode; 
global java.lang.String hostType;

global java.lang.String userCode;
global java.lang.String recordCode;
global java.lang.String recordName;

global java.util.List attributeList;
global java.util.List addedLabelList;
global java.util.List removedLabelList;
global java.util.List addedLabelList;
global java.util.List putFuseLeafAttributeList;
global java.util.List addedLeafAttrList;
global java.util.Map removedLeafAttrMap;
global com.abc.rrc.record.RootRecord rootRecord;
global  com.abc.fuse.improve.ops.builder.RecordRelationOpsBuilder recordRelationOpsBuilder;
global com.abc.complexus.RecordComplexus recordComplexus;

rule "人和家庭的关系放进空间"
salience 10 
when
	eval(BaseConstant.TYPE_家庭信息.equals(hostType));
then 
		RelationCorrelation relationCorrelation = recordComplexus.getRelationCorrelation(hostCode);
		if (relationCorrelation != null) {
			relationCorrelation.getRecordRelation().forEach(recordRelation -> 
			insert(recordRelation)
			);
		}
	//激活 
	kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup( "a_家庭与人的关系" ).setFocus();
end


rule "编辑家庭成员与户主的关系"//编辑户主与成员的关系
	agenda-group "a_家庭与人的关系"
	salience 10 
when
 RecordRelation(type==RelationType.RR_家庭信息_户主_人口信息,left==hostCode, $huzCode:right);
 RecordRelation(type==RelationType.RR_家庭信息_成员_人口信息,left==hostCode,right==recordCode);
 FuseAttribute(name==PeopleItem.和户主关系,sqlValue != null, $fa:sqlValue);
 OpsAttribute( name==PeopleItem.和户主关系 , sqlValue!=null, $opsValue:sqlValue)
 eval(!$fa.equals($opsValue))
then    
	//移除关系
	String relationNameHis =BaseConstant.getRelationName(String.valueOf($fa));
	recordRelationOpsBuilder.removeRelation(relationNameHis,$huzCode);
	//添加关系
	String relationName = BaseConstant.getRelationName(String.valueOf($opsValue));
	recordRelationOpsBuilder.putRelation(relationName,$huzCode); 
end

rule "把身份证号从15位改为18位"
	salience 20 
when 
	OpsAttribute(name==PeopleItem.身份证号码, $value:value);
	eval(IDIntrospection.validate15IDCard(String.valueOf($value)))
then
	Attribute attr = AttributeFactory.newInstance(PeopleItem.身份证号码, IDIntrospection.convertIdTo18(String.valueOf($value)));
	attributeList.add(attr);
end

rule "根据身份证号自动填写性别和生日"
	salience 15
when
	$idtype:OpsLeafAttribute(name==PeopleItem.证件信息_证件类型,value==EnumKeyValue.ENUM_证件类型_身份证,$leafCode:leafCode);
    $idValue:OpsLeafAttribute(name==PeopleItem.证件信息_证件号码,leafCode==$leafCode,CommonCalculation.isBasicLawful(value));
	 eval(IDIntrospection.inspectId($idValue.getValueForShow()));
then 
	//设置出生日期
	Attribute birthday=AttributeFactory.newInstance(PeopleItem.出生日期, IDIntrospection.extractBirthday($idValue.getValueForShow()));
	attributeList.add(birthday);
	//设置性别
	Attribute sex=AttributeFactory.newInstance(PeopleItem.性别, IDIntrospection.extractSex($idValue.getValueForShow()));
	attributeList.add(sex);
end

